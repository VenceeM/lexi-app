// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String?

  role_id Int
  role    Roles @relation(fields: [role_id], references: [id])

  google_id Int?

  user_information UserInformations?
  refresh_token    RefreshTokens[]
  invalid_tokens   InvalidTokens[]
  project          Projects[]
  project_member   ProjectMember[]

  status     String    @default("active")
  deleted_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Roles {
  id         Int      @id @default(autoincrement())
  name       String
  user       Users[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model UserInformations {
  id          Int    @id @default(autoincrement())
  first_name  String
  middle_name String
  last_name   String
  age         Int
  birthdate   String

  user_id Int   @unique
  user    Users @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_informations")
}

model RefreshTokens {
  id            Int    @id @default(autoincrement())
  refresh_token String
  user_id       Int
  user          Users  @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("refresh_tokens")
}

model InvalidTokens {
  id             Int      @id @default(autoincrement())
  user_id        Int
  user           Users    @relation(fields: [user_id], references: [id])
  access_token   String
  expirationTime String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("invalid_tokens")
}

// Project Members
model ProjectMember {
  id         Int                  @id @default(autoincrement())
  user_id    Int
  user       Users                @relation(fields: [user_id], references: [id])
  project_id Int
  project    Projects             @relation(fields: [project_id], references: [id])
  status     ProjectMemberStatus? @default(PENDING)

  @@map("project_members")
}

model Projects {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  max_member_count Int             @default(5)
  owner_user_id    Int
  owner_user       Users           @relation(fields: [owner_user_id], references: [id])
  status           ProjectStatus?  @default(ACTIVE)
  project_member   ProjectMember[]

  @@map("projects")
}

// Project Members
enum ProjectMemberStatus {
  INVITED
  PENDING
  APPROVED
  REJECTED
  INACTIVE
  BANNED
  REMOVED
}

// Project Status
enum ProjectStatus {
  ACTIVE
  INACTIVE
}
